import * as sgMail from '@sendgrid/mail';
sgMail.setApiKey(
  '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',
);
export const sendMailToDeptHead = async (user, capas, mailService) => {
  // Define the email content with a table to list CAPAs
  const generateCAPATable = (capas) => {
    // Generate table rows for each CAPA
    const rows = capas
      .map(
        (capa) => `
        <tr>
          <td>${capa.title}</td>
          <td>${capa.description}</td>
          <td>${capa.date.startDate} - ${capa.date.endDate}</td>
          <td>${capa.serialNumber}</td>
        </tr>
      `,
      )
      .join('');

    // Return the complete HTML table
    return `
        <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse; width: 100%;">
          <thead>
            <tr>
              <th>Title</th>
              <th>Description</th>
              <th>Date Range</th>
              <th>Serial Number</th>
            </tr>
          </thead>
          <tbody>
            ${rows}
          </tbody>
        </table>
      `;
  };

  const emailMessageIP = `
      Dear User,
      Following CAPAs have been generated by the system on observation of deviations for the corresponding KPIs.
      ${generateCAPATable(capas)}
      Here is the link "${process.env.PROTOCOL}://${
    user?.organization?.realmName
  }.${process.env.REDIRECT}/cara" click for details
    `;

  const emailMessage = `
      <p>Dear User,</p>
      <p>Following CAPAs have been generated by the system on observation of deviations for the corresponding KPIs.</p>
      ${generateCAPATable(capas)}
      <p>Here is the link <a href="${process.env.PROTOCOL}://${
    user.organization?.realmName
  }.${process.env.REDIRECT}/cara">click for details</a></p>
    `;

  const msg = {
    to: user?.email, // recipient email
    from: process.env.FROM, // sender email
    subject: 'CAPA has been initiated',
    html: `<div>${emailMessage}</div>`,
  };

  try {
    if (process.env.MAIL_SYSTEM === 'IP_BASED') {
      await mailService(user.email, 'CAPA has been initiated', emailMessageIP);
    } else {
      try {
        await sgMail.send(msg);
      } catch (error) {
        throw error;
      }
    }
  } catch (error) {
    if (error.response && error.response.body && error.response.body.errors) {
      // Log or handle specific errors from SendGrid
      console.error('SendGrid Error:', error.response.body.errors);
    } else {
      // Handle other types of errors
      console.error('An error occurred:', error.message);
    }
  }
};
